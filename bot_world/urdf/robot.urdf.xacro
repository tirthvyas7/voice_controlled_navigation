<?xml version="1.0"?>

<!--BOT URDF WITH ROTATING FRONT CAMERA JOINT TO VISUALISE IN GAZEBO-->

<robot name="bot" xmlns:xacro="http://www.ros.org/wiki/xacro">
    
    <!-- Materials-->
    
    <material name="green">
                <color rgba="0 1 0 1"/>
    </material>

    <material name="grey">
                <color rgba="0.5 0.5 0.5 1"/>
    </material>

    <material name="black">
        <color rgba="0 0 0 1"/>
    </material>

    <material name="red">
        <color rgba="1 0 0 1"/>
    </material>

    <!-- Inertia Macros-->

    <xacro:macro name="box_inertia" params="m l w h xyz rpy">
        <inertial>
            <origin xyz="${xyz}" rpy="${rpy}"/>
            <mass value="${m}"/>
            <inertia ixx="${(m/12)*(h*h+l*l)}" ixy="0.0" ixz="0.0"
                     iyy="${(m/12)*(w*w+h*h)}" iyz="0.0"
                     izz="${(m/12)*(w*w+l*l)}"/>
        </inertial>    
    </xacro:macro>

    
    <xacro:macro name="cylinder_inertia" params="m r l xyz rpy">
        <inertial>
            <origin xyz="${xyz}" rpy="${rpy}"/>
            <mass value="${m}"/>
            <inertia ixx="${(m/12)*(3*r*r-l*l)}" ixy="0.0" ixz="0.0"
                     iyy="${(m/12)*(3*r*r+l*l)}" iyz="0.0"
                     izz="${(m/2)*(r*r)}"/>
        </inertial>    
    </xacro:macro>

    <xacro:macro name="sphere_inertia" params="m r xyz rpy">
        <inertial>
            <origin xyz="${xyz}" rpy="${rpy}"/>
            <mass value="${m}"/>
            <inertia ixx="${2/5*m*r*r}" ixy="0.0" ixz="0.0"
                     iyy="${2/5*m*r*r}" iyz="0.0"
                     izz="${2/5*m*r*r}"/>
        </inertial>    
    </xacro:macro>

    <!--PROPERTIES-->
    <xacro:arg name="yaml_file" default="configuration.yaml"/>
    <xacro:property name="yaml" value="$(arg yaml_file)" />
    
    <xacro:property name="props" value="${ xacro.load_yaml(yaml)}"/>
    <xacro:property name="wheel_radius" value="${props['wheel_radius']}" />
    <xacro:property name="wheel_thickness" value="${props['wheel_thickness']}" />
    <xacro:property name="track_width" value="${props['track_width']}" />
    <xacro:property name="wheel_base" value="${props['wheel_base']}" />
    <xacro:property name="base_link_length" value="${props['base_link_length']}" />
    <xacro:property name="lidar_thickness" value="${props['lidar_thickness']}" />
    <xacro:property name="base_link_height" value="${props['base_link_height']}" />
    <xacro:property name="lidar_radius" value="${props['lidar_radius']}" />
    <xacro:property name="base_lidar_distance_x" value="${props['base_lidar_distance_x']}" />
    <xacro:property name="base_caster_distance" value="${props['base_caster_distance']}" />


    
    <!--DEFINING LINKS-->
    <link name="base_footprint"/>
    <link name="base_link">
        <visual >
            <origin xyz="0.0 0.0 ${base_link_height/2}" rpy="0.0 0.0 0.0"/>
            <geometry>
                <box size="${base_link_length} ${track_width-wheel_thickness} ${base_link_height}"/>
            </geometry>
            <material name="green" />    
        </visual>
        <collision>
            <origin xyz="${base_link_length/2-wheel_radius} 0.0 ${base_link_height/2}" rpy="0.0 0.0 0.0"/>
            <geometry>
                <box size="${base_link_length} ${track_width-wheel_thickness} ${base_link_height}"/>
            </geometry>
        </collision>
        <xacro:box_inertia m="4.0" l="${base_link_length}" w="${base_link_length}" h="${base_link_height}"
                            xyz="-${base_link_length/2-wheel_radius} 0.0 ${base_link_height/2}" rpy="0.0 0.0 0.0"/>
        
    </link>

    <link name="right_wheel_link">`
        <visual>
            <geometry>
                <cylinder radius="${wheel_radius}" length="${wheel_thickness}"/>
            </geometry>
            <origin xyz="0.0 0.0 0.0" rpy="${pi/2.0} 0.0 0.0"/>
            <material name="black"/>
        </visual>
        <collision>
            <geometry>
                <cylinder radius="${wheel_radius}" length="${wheel_thickness}"/>
            </geometry>
            <origin xyz="0.0 0.0 0.0" rpy="${pi/2.0} 0.0 0.0"/>
        </collision>
        <xacro:cylinder_inertia m="2.1" r="${wheel_radius}" l="${wheel_thickness}"
                            xyz="0.0 0.0 0.0" rpy="${pi/2.0} 0.0 0.0"/>   
    </link>

    <link name="left_wheel_link">
        <visual>
            <geometry>
                <cylinder radius="${wheel_radius}" length="${wheel_thickness}"/>
            </geometry>
            <origin xyz="0.0 0.0 0.0" rpy="${pi/2.0} 0.0 0.0"/>
            <material name="black"/>
        </visual>
        <collision>
            <geometry>
                <cylinder radius="${wheel_radius}" length="${wheel_thickness}"/>
            </geometry>
            <origin xyz="0.0 0.0 0.0" rpy="${pi/2.0} 0.0 0.0"/>
        </collision>
        <xacro:cylinder_inertia m="2.1" r="${wheel_radius}" l="${wheel_thickness}"
                            xyz="0.0 0.0 0.0" rpy="${pi/2.0} 0.0 0.0"/>   
    </link>

    <link name="caster_wheel_link">
        <visual>
            <geometry>
                <sphere radius="${wheel_radius/2.0}"/>
            </geometry>
            <origin xyz="0.0 0.0 0.0" rpy="${pi/2.0} 0.0 0.0"/>
            <material name="black"/>
        </visual>
        <collision>
            <geometry>
                <sphere radius="${wheel_radius/2.0}"/>
            </geometry>
            <origin xyz="0.0 0.0 0.0" rpy="${pi/2.0} 0.0 0.0"/>
        </collision>
        <xacro:sphere_inertia m="0.2" r="${wheel_radius/10.0}"
                            xyz="0.0 0.0 0.0" rpy="${pi/2.0} 0.0 0.0"/>      
    </link>
    <link name="lidar_link">
        <visual>
            <geometry>
                <cylinder radius="${lidar_radius}" length="${lidar_thickness}"/>
            </geometry>
            <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0"/>
            <material name="black"/>
        </visual>
        <collision>
            <geometry>
                <cylinder radius="${lidar_radius}" length="${lidar_thickness}"/>
            </geometry>
            <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0"/>
        </collision>
        <xacro:cylinder_inertia m="2.0" r="${lidar_radius}" l="${lidar_thickness}"
                            xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0"/>   
    </link>    
 


    <!-- JOINTS-->

    <joint name="base_right_wheel_joint" type="continuous">
        <origin xyz="-${base_link_length/2-wheel_radius}  -${track_width/2} 0" rpy="0.0 0.0 0"/>
        <parent link="base_link"/>
        <child link="right_wheel_link"/>
        <axis xyz="0 1 0"/>    
    </joint>

    <joint name="base_left_wheel_joint" type="continuous">
        <origin xyz="-${base_link_length/2-wheel_radius}  ${track_width/2} 0" rpy="0.0 0.0 0"/>
        <parent link="base_link"/>
        <child link="left_wheel_link"/>
        <axis xyz="0 1 0"/>
        
    </joint>

    <joint name="base_caster_wheel_joint" type="fixed">
        <origin xyz="${base_caster_distance} 0 -${wheel_radius/2.0}" rpy="0.0 0.0 0"/>
        <parent link="base_link"/>
        <child link="caster_wheel_link"/>
    
    </joint>

    <joint name="base_lidar_joint" type="fixed">
        <origin xyz="${base_lidar_distance_x} 0 ${base_link_height+lidar_thickness/2} " rpy="0.0 0.0 0"/>
        <parent link="base_link"/>
        <child link="lidar_link"/>
    </joint>

    <joint name="base_joint" type="fixed">
        <origin xyz="0.0 0.0 ${wheel_radius}" rpy="0.0 0.0 0"/>
        <parent link="base_footprint"/>
        <child link="base_link"/>
        
    </joint>
    
    <!-- ADDING COLOURS IN GAZEBO-->
     <gazebo reference="base_link">
        <material>Gazebo/Green</material>
     </gazebo>

     <gazebo reference="left_wheel_link">
        <material>Gazebo/Black</material>
     </gazebo>

     <gazebo reference="right_wheel_link">
        <material>Gazebo/Black</material>
     </gazebo>

     <gazebo reference="lidar_link">
        <material>Gazebo/Black</material>
     </gazebo>

     <gazebo reference="caster_wheel_link">
        <material>Gazebo/Black</material>
        <mu1 value="0.1"/>
        <mu2 value="0.1"/>

     </gazebo>

     <!-- ADDING SENSOR PLUGINS-->

      <!-- LIDAR-->
      <gazebo reference="lidar_link">
        <sensor name="rplidar_a3" type="ray">
            <always_on>true</always_on>
            <visualize>true</visualize>
            <pose>0 -0.06 0.015 0 -0 -1.57</pose>
            <update_rate>15</update_rate>
            <ray>
              <scan>
                <horizontal>
                  <samples>667</samples>
                  <resolution>0.54</resolution>
                  <min_angle>-1.57</min_angle>
                  <max_angle>1.57</max_angle>
                </horizontal>
              </scan>
              <range>
                <min>0.120000</min>
                <max>12</max>
                <resolution>0.54</resolution>
              </range>
              <noise>
                <type>gaussian</type>
                <mean>0.0</mean>
                <stddev>0.01</stddev>
              </noise>
            </ray>
            <plugin name="bytes_laserscan" filename="libgazebo_ros_ray_sensor.so">
              <ros>
                  <namespace>lidar</namespace>
                <remapping>~/out:=scan</remapping>
              </ros>
              <output_type>sensor_msgs/LaserScan</output_type>
              <frame_name>lidar_link</frame_name>
            </plugin>
        </sensor>
      </gazebo>
    <!-- DIFFERENTIAL DRIVE PLUGIN-->
     
    <gazebo>
        <plugin name="gazebo_ros_diff_drive" filename="libgazebo_ros_diff_drive.so">

            <!-- Update rate in Hz -->
            <update_rate>50</update_rate>
      
            <!-- wheels -->
            <left_joint>base_left_wheel_joint</left_joint>
            <right_joint>base_right_wheel_joint</right_joint>
      
            <!-- kinematics -->
            <wheel_separation>${track_width}</wheel_separation>
            <wheel_diameter>${2*wheel_radius}</wheel_diameter>
           
            <!-- input -->
            <command_topic>cmd_vel</command_topic>
      
            <!-- output -->
            <publish_odom>true</publish_odom>
            <publish_odom_tf>true</publish_odom_tf>
            <publish_wheel_tf>true</publish_wheel_tf>
      
            <odometry_topic>odom</odometry_topic>
            <odometry_frame>odom</odometry_frame>
            <robot_base_frame>base_footprint</robot_base_frame>
      
          </plugin>
     </gazebo>
</robot>
